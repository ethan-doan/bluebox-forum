{"ast":null,"code":"// Get All Posts in Reverse Chronological Order\nexport const fetchPostsByCreate = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/posts\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n};\n\n// Get an Individual Post By ID\nexport const fetchPostById = async id => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/posts/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n};\n\n// Add a Post\nexport const addPost = async postData => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n};\n\n// Get All Comments in Reverse Chronological Order\nexport const fetchCommentsByCreate = async (parentID, comment) => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/comments\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error: \", error);\n    throw error;\n  }\n};\n\n// UPDATED FOR COMMENTSSCHEMA: Add a Comment\nexport const addCommentSchema = async (parentID, comment) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/comments/${parentID}/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        body: JSON.stringify(comment)\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP Error! Status: \": ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error Adding Comment:\", error);\n    throw error;\n  }\n};\n\n// Add a Comment\nexport const addComment = async (postId, comment) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/posts/${postId}/comments`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(comment)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error adding comment to post:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchPostsByCreate","response","fetch","ok","Error","json","error","console","fetchPostById","id","addPost","postData","method","headers","body","JSON","stringify","fetchCommentsByCreate","parentID","comment","addCommentSchema","status","addComment","postId"],"sources":["/Users/ethandoan/Downloads/Projects/bluebox-forum/client/src/api/apiClient.js"],"sourcesContent":["// Get All Posts in Reverse Chronological Order\nexport const fetchPostsByCreate = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/posts\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n};\n\n// Get an Individual Post By ID\nexport const fetchPostById = async (id) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/posts/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n};\n\n// Add a Post\nexport const addPost = async (postData) => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(postData),\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n};\n\n// Get All Comments in Reverse Chronological Order\nexport const fetchCommentsByCreate = async (parentID, comment) => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/comments\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch error: \", error);\n    throw error;\n  }\n};\n\n// UPDATED FOR COMMENTSSCHEMA: Add a Comment\nexport const addCommentSchema = async (parentID, comment) => {\n  try {\n    const response = await fetch(\n      `http://localhost:3000/api/comments/${parentID}/`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          body: JSON.stringify(comment),\n        },\n      }\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP Error! Status: \": ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error Adding Comment:\", error);\n    throw error;\n  }\n};\n\n// Add a Comment\nexport const addComment = async (postId, comment) => {\n  try {\n    const response = await fetch(\n      `http://localhost:3000/api/posts/${postId}/comments`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(comment),\n      }\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error adding comment to post:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}